// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  // provider = "prisma-client"
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String?   @unique
  avatarUrl String?
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime?  @updatedAt

  @@map("users")
}

model Author {
  id        Int      @id @default(autoincrement())
  firstName String?
  lastName  String?
  bio       String?
  avatarUrl String?
  verified  Boolean  @default(false)
  email     String?   @unique
  password  String?
  role      String   @default("user")
  isActive  Boolean  @default(true)
  isVerified  Boolean  @default(false)
  isDeleted  Boolean  @default(false)
  isSuspended  Boolean  @default(false)
  isLocked  Boolean  @default(false)
  isExpired  Boolean  @default(false)
  isBlocked  Boolean  @default(false)
  socialLinks Json?
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@map("authors")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Post {
  id         Int       @id @default(autoincrement())
  title      String
  mainImage  String?
  description String?
  content    Json
  votes      Int       @default(0)
  authorId   Int
  author     Author    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  comments   Comment[]
  likes      Like[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  tags       String[]  @default([])

  views      Int       @default(0)
  isPublished Boolean   @default(false)
  isPriority  Boolean   @default(false)
  isPinned    Boolean   @default(false)

  @@map("posts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    Int?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("likes")
}



